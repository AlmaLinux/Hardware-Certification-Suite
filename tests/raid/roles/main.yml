---

# Setup
- name: Tast Raid - install dependent software
  package:
    name:
      - mdadm
      - fio

# Necessary settings before running tests on opennebula
- name: remember current vd
  ansible.builtin.shell: df -h|grep 'dev/vd'|awk '{print $1}'
  register: current
  when: run_on_nebula is defined

- name: returns vds for raid
  ansible.builtin.shell:
    "count=0; m=('/dev/vda1' '/dev/vdb1' '/dev/vdc1'); for i in ${m[@]};
    do test {{ current.stdout }} == ${m[$count]} && unset m[$count]; ((count=count+1)); done;
    echo ${m[@]}"
  register: result
  when: run_on_nebula is defined

- name: vd1
  ansible.builtin.shell: "echo {{ result.stdout }}|awk '{print $1}'"
  register: vd1
  when: run_on_nebula is defined

- name: vd2
  ansible.builtin.shell: "echo {{ result.stdout }}|awk '{print $2}'"
  register: vd2
  when: run_on_nebula is defined

- name: pip3 install <pexpect>
  pip: name=pexpect state=present executable=/usr/bin/pip3
  when: run_on_nebula is defined

- name: configure raid
  ansible.builtin.expect:
    command: "mdadm --create /dev/md0 --level=1 --raid-devices=2 {{ vd1.stdout }} {{ vd2.stdout }}"
    responses:
      "Continue creating array?": "y\r"
  when: run_on_nebula is defined

# Test
- name: Tast Raid - run test
  ansible.builtin.shell: "{{ sut_tests_dir }}/raid/run_test.sh {{ test_raid['duration'] }} disable-preloader"
  register: output

- name: Tast Raid - copy log
  local_action: copy content="{{ output.stdout }}" dest="{{ lts_logs_dir }}/raid.log"

# Cleaup
- name: Tast Raid - cleanup
  package:
    name:
      - fio
    state: removed
